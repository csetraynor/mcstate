% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/particle_filter.R
\name{particle_filter}
\alias{particle_filter}
\title{Particle filter}
\description{
Create a \code{particle_filter} object for running
  and interacting with a particle filter.  A higher-level
  interface will be implemented later.
}
\examples{
# A basic SIR model included in the package:
path <- system.file("example/sir/odin_sir.R", package = "mcstate")
gen <- odin::odin_(path)
sir <- gen()

# Initial conditions for both the model and particle filter
y0 <- sir$initial(0)

# Some data that we will fit to:
y <- sir$run(seq(0, 400, by = 4))
data_raw <- as.data.frame(y)[c("day", "incidence")]

# Convert this into our required format:
data <- mcstate::particle_filter_data(data_raw, "day", 4)

# A comparison function
compare <- function(state, output, observed, exp_noise = 1e6) {
  incid_modelled <- output[1, ]
  incid_observed <- observed$incidence
  lambda <- incid_modelled +
    rexp(n = length(incid_modelled), rate = exp_noise)
  dpois(x = incid_observed, lambda = lambda, log = TRUE)
}

# Construct the particle_filter object:
p <- mcstate::particle_filter$new(data, sir, compare)
p$run(y0, 100, TRUE)

# Our simulated trajectories, with the "real" data superimposed
matplot(data_raw$day, t(p$history[1, , ]), type = "l",
        xlab = "Time", ylab = "State",
        col = "#ff000022", lty = 1, ylim = range(p$history))
matlines(data_raw$day, t(p$history[2, , ]), col = "#ffff0022", lty = 1)
matlines(data_raw$day, t(p$history[3, , ]), col = "#0000ff22", lty = 1)
matpoints(y[, "day"], y[, 2:4], pch = 19, col = c("red", "yellow", "blue"))
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{model}}{The odin model being simulated (cannot be
re-bound, but can be modified using \code{$set_user()} etc.}

\item{\code{state}}{The final state of the last run of the particle filter}

\item{\code{history}}{The history of the last run of the particle filter
(if enabled with \code{save_history = TRUE}, otherwise NULL
Create the particle filter}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{particle_filter$new()}}
\item \href{#method-run}{\code{particle_filter$run()}}
\item \href{#method-predict}{\code{particle_filter$predict()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{particle_filter$new(data, model, compare)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{data}}{The data set to be used for the particle filter.
Must be a \code{\link{data.frame}} with at least columns
\code{step_start} and \code{step_end}.  Additional columns are
used for comparison with the simulation.}

\item{\code{model}}{A stochastic model to use.  Must be an
\code{odin_model} object (i.e., a model that has been created
from an \code{odin_generator} object)}

\item{\code{compare}}{A comparison function.  Must take arguments
\code{state}, \code{output} and \code{data} as arguments.
\code{state} is the simulated model state (a matrix with as
many rows as there are state variables and as many columns as
there are particles.  \code{output} is the output variables, if
the model produces them (\code{NULL} otherwise) and \code{data}
is a \code{list} of observed data corresponding to the current
time's row in the \code{data} object provided here in the
constructor.
We probably need some special treatment for the initial case
but it's not clear that it belongs here, rather than in some
function above this, as state is just provided here as a vector

Run the particle filter}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-run"></a>}}
\subsection{Method \code{run()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{particle_filter$run(state, n_particles, save_history = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{state}}{The initial state. Can either be a vector (same
state for all particles) or a matrix with \code{n_particles}
columns}

\item{\code{n_particles}}{The number of particles to simulate}

\item{\code{save_history}}{Logical, indicating if the history of all
particles should be saved}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A single numeric value representing the log-likelihood
(\code{-Inf} if the model is impossible)
Create predicted trajectories, based on the final point of a
run with the particle filter
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-predict"></a>}}
\subsection{Method \code{predict()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{particle_filter$predict(t, append = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{t}}{The steps to predict from, \emph{offset from the final
point}. As a result the first time-point of \code{t} must be 0.
The predictions will not however, include that point.}

\item{\code{append}}{Logical, indicating if the predictions should be
appended onto the previous history of the simulation.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A 3d array with dimensions representing (1) the state
vector, (2) the particle, (3) time
}
}
}
